package main

import (
	"fmt"
	"sync"
)

func main1() {
	var x int
	wg := new(sync.WaitGroup)

	for i := 0; i < 1000; i++ { // Запускаем 1000 экземпляров горутины, увеличивающей счетчик на 1
		wg.Add(1)
		go func(wg *sync.WaitGroup) { // Можно не передавать, это для наглядности
			defer wg.Done()
			x++ // Запускаются почти одновременно поэтому например 2 горунтины получили о от x обе
		}(wg) // сплюсовали в итоге получили что x два раза присвоили 1, и пошло по накатанной
	}

	wg.Wait()
	fmt.Println(x) // Редко получаем 1000
}

// Как фиксить?

func main2() {
	var x int
	wg := new(sync.WaitGroup)
	mu := new(sync.Mutex)

	for i := 0; i < 1000; i++ {
		// Запускаем 1000 экземпляров горутины, увеличивающей счетчик на 1
		wg.Add(1)
		go func(wg *sync.WaitGroup, mu *sync.Mutex) { // Можно их и не передавать, это для наглядности
			defer wg.Done()
			mu.Lock()
			x++
			mu.Unlock()
		}(wg, mu)
	}

	wg.Wait()
	fmt.Println(x)
}

// От других используя потоки:
func main3() {
	wg := new(sync.WaitGroup)
	// создаем буферизированный канал, чтобы не блокировать основной поток
	ch := make(chan int, 1)
	// передаем начальное значение в канал
	ch <- 0
	for i := 0; i < 1000; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			// Забираем значение из канала, инкрементируем его и отправляем обратно в тот же канал
			ch <- <-ch + 1
		}()
	}

	wg.Wait()
	// Достаем конечное значение из канала
	fmt.Println(<-ch)
}

// Под капотом go использует мьютексы, поэтому через каналы менее эффективно
